image:
  registry: ghcr.io
  repository: kyverno/policy-reporter
  pullPolicy: IfNotPresent
  tag: 2.4.0

imagePullSecrets: []

# Deploy not more than one replica
# Policy Reporter doesn't scale yet.
# Each pod will report each change.
replicaCount: 1

deploymentStrategy: {}
  # rollingUpdate:
  #  maxSurge: 25%
  #  maxUnavailable: 25%
  # type: RollingUpdate

# Key/value pairs that are attached to Deployment.
annotations: {}

# Create cluster role policies
rbac:
  enabled: true

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

service:
  enabled: true
  ## configuration of service
  # key/value
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port:   '8080'
  # key/value
  labels: {}
  type: ClusterIP
  # integer number. This is port for service
  port: 8080

podSecurityContext:
  fsGroup: 1234

securityContext:
  runAsUser: 1234
  runAsNonRoot: true
  privileged: false
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
      - ALL
  seccompProfile:
    type: RuntimeDefault

# Key/value pairs that are attached to pods.
podAnnotations: {}

# Key/value pairs that are attached to pods.
podLabels: {}

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   memory: 100Mi
  #   cpu: 10m
  # requests:
  #   memory: 75Mi
  #   cpu: 5m

# Enable a NetworkPolicy for this chart. Useful on clusters where Network Policies are
# used and configured in a default-deny fashion.
networkPolicy:
  enabled: false
  # Kubernetes API Server
  egress:
  - to:
    ports:
    - protocol: TCP
      port: 6443
  ingress: []

# REST API
rest:
  enabled: true

# Prometheus Metrics API
metrics:
  enabled: true

# Filter PolicyReport resources to process
reportFilter:
  namespaces:
    # Process only PolicyReport resources from an included namespace, wildcards are supported
    include: []
    # Ignore all PolicyReport resources from a excluded namespace, wildcards are supported
    # exclude will be ignored if an include filter exists
    exclude: []
  clusterReports:
    # Disable the processing of ClusterPolicyReports
    disabled: false

# enable policy-report-ui
ui:
  enabled: true

kyvernoPlugin:
  enabled: false

# Settings for the monitoring subchart
monitoring:
  enabled: false

global:
  # available plugins
  plugins:
    # enable kyverno for Policy Reporter UI and monitoring
    kyverno: false
  # The name of service policy-report. Defaults to ReleaseName.
  backend: ""
  # Service Port number
  port: 8080
  fullnameOverride: ""
  # additional labels added on each resource
  labels: {}

policyPriorities: {}

# Reference a configuration which already exists instead of creating one
existingTargetConfig:
  enabled: false
  # Name of the secret with the config
  name: ""
  # subPath within the secret (defaults to config.yaml)
  subPath: ""

# Supported targets for new PolicyReport Results
target:
  loki:
    # loki host address
    host: "http://loki.monitoring:3100"
    # minimum priority "" < info < warning < critical < error
    minimumPriority: "warning"
    # list of sources which should send to loki
    sources: []
    # Skip already existing PolicyReportResults on startup
    skipExistingOnStartup: false
    # Added as additional labels to each Loki event
    customLabels: {}
    sources:
    - kyverno



# Node labels for pod assignment
# ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

# Tolerations for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

# Anti-affinity to disallow deploying client and master nodes on the same worker node
affinity: {}

# livenessProbe for policy-reporter
livenessProbe:
  httpGet:
    path: /ready
    port: http

# readinessProbe for policy-reporter
readinessProbe:
  httpGet:
    path: /healthz
    port: http

